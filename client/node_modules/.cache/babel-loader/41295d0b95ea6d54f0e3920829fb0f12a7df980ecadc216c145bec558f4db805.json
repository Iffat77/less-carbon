{"ast":null,"code":"import axios from 'axios';\nimport api from \"./apiConfig\";\n\n// const baseUrl = `${api}/api/users`; // Replace with your backend authentication API endpoint\n\nconst authService = {\n  login: async (email, password) => {\n    console.log('logging in');\n    const response = await axios.post(`${api}/api/users/login`, {\n      email,\n      password\n    });\n    return response.data.token;\n  },\n  register: async (name, email, password) => {\n    const response = await axios.post(`${api}/users/register`, {\n      name,\n      email,\n      password\n    });\n    return response.data.token;\n  },\n  logout: () => {\n    // Clear the token from local storage or cookies\n    // For example, if using localStorage:\n    localStorage.removeItem('token');\n  },\n  getUserData: async () => {\n    const response = await axios.get(`${api}/users//user`);\n    return response.data;\n  },\n  isAuthenticated: () => {\n    // Check if the user is authenticated (e.g., check the presence of a valid token)\n    // For example, if using localStorage:\n    const token = localStorage.getItem('token');\n    return !!token; // Return true if token exists, false otherwise\n  }\n};\n\nexport default authService;","map":{"version":3,"names":["axios","api","authService","login","email","password","console","log","response","post","data","token","register","name","logout","localStorage","removeItem","getUserData","get","isAuthenticated","getItem"],"sources":["/Users/iffathossain/iffatdev/projects/less-carbon/client/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\nimport api from \"./apiConfig\";\n\n// const baseUrl = `${api}/api/users`; // Replace with your backend authentication API endpoint\n\nconst authService = {\n  login: async (email, password) => {\n    console.log('logging in')\n    const response = await axios.post(`${api}/api/users/login`, { email, password });\n    return response.data.token;\n  },\n\n  register: async (name, email, password) => {\n    const response = await axios.post(`${api}/users/register`, { name, email, password });\n    return response.data.token;\n  },\n\n  logout: () => {\n    // Clear the token from local storage or cookies\n    // For example, if using localStorage:\n    localStorage.removeItem('token');\n  },\n\n  getUserData: async () => {\n    const response = await axios.get(`${api}/users//user`);\n    return response.data;\n  },\n\n  isAuthenticated: () => {\n    // Check if the user is authenticated (e.g., check the presence of a valid token)\n    // For example, if using localStorage:\n    const token = localStorage.getItem('token');\n    return !!token; // Return true if token exists, false otherwise\n  },\n};\n\nexport default authService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,aAAa;;AAE7B;;AAEA,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChCC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAE,GAAER,GAAI,kBAAiB,EAAE;MAAEG,KAAK;MAAEC;IAAS,CAAC,CAAC;IAChF,OAAOG,QAAQ,CAACE,IAAI,CAACC,KAAK;EAC5B,CAAC;EAEDC,QAAQ,EAAE,MAAAA,CAAOC,IAAI,EAAET,KAAK,EAAEC,QAAQ,KAAK;IACzC,MAAMG,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAE,GAAER,GAAI,iBAAgB,EAAE;MAAEY,IAAI;MAAET,KAAK;MAAEC;IAAS,CAAC,CAAC;IACrF,OAAOG,QAAQ,CAACE,IAAI,CAACC,KAAK;EAC5B,CAAC;EAEDG,MAAM,EAAEA,CAAA,KAAM;IACZ;IACA;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAEDC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMT,QAAQ,GAAG,MAAMR,KAAK,CAACkB,GAAG,CAAE,GAAEjB,GAAI,cAAa,CAAC;IACtD,OAAOO,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDS,eAAe,EAAEA,CAAA,KAAM;IACrB;IACA;IACA,MAAMR,KAAK,GAAGI,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACT,KAAK,CAAC,CAAC;EAClB;AACF,CAAC;;AAED,eAAeT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}